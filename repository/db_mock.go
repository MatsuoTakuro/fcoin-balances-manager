// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package repository

import (
	"context"
	"database/sql"
	"github.com/jmoiron/sqlx"
	"sync"
)

// Ensure, that BeginnerMock does implement Beginner.
// If this is not the case, regenerate this file with moq.
var _ Beginner = &BeginnerMock{}

// BeginnerMock is a mock implementation of Beginner.
//
//	func TestSomethingThatUsesBeginner(t *testing.T) {
//
//		// make and configure a mocked Beginner
//		mockedBeginner := &BeginnerMock{
//			BeginTxFunc: func(ctx context.Context, opts *sql.TxOptions) (*sql.Tx, error) {
//				panic("mock out the BeginTx method")
//			},
//			ExecContextFunc: func(ctx context.Context, query string, args ...any) (sql.Result, error) {
//				panic("mock out the ExecContext method")
//			},
//			QueryRowxContextFunc: func(ctx context.Context, query string, args ...any) *sqlx.Row {
//				panic("mock out the QueryRowxContext method")
//			},
//			QueryxContextFunc: func(ctx context.Context, query string, args ...any) (*sqlx.Rows, error) {
//				panic("mock out the QueryxContext method")
//			},
//		}
//
//		// use mockedBeginner in code that requires Beginner
//		// and then make assertions.
//
//	}
type BeginnerMock struct {
	// BeginTxFunc mocks the BeginTx method.
	BeginTxFunc func(ctx context.Context, opts *sql.TxOptions) (*sql.Tx, error)

	// ExecContextFunc mocks the ExecContext method.
	ExecContextFunc func(ctx context.Context, query string, args ...any) (sql.Result, error)

	// QueryRowxContextFunc mocks the QueryRowxContext method.
	QueryRowxContextFunc func(ctx context.Context, query string, args ...any) *sqlx.Row

	// QueryxContextFunc mocks the QueryxContext method.
	QueryxContextFunc func(ctx context.Context, query string, args ...any) (*sqlx.Rows, error)

	// calls tracks calls to the methods.
	calls struct {
		// BeginTx holds details about calls to the BeginTx method.
		BeginTx []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Opts is the opts argument value.
			Opts *sql.TxOptions
		}
		// ExecContext holds details about calls to the ExecContext method.
		ExecContext []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Query is the query argument value.
			Query string
			// Args is the args argument value.
			Args []any
		}
		// QueryRowxContext holds details about calls to the QueryRowxContext method.
		QueryRowxContext []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Query is the query argument value.
			Query string
			// Args is the args argument value.
			Args []any
		}
		// QueryxContext holds details about calls to the QueryxContext method.
		QueryxContext []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Query is the query argument value.
			Query string
			// Args is the args argument value.
			Args []any
		}
	}
	lockBeginTx          sync.RWMutex
	lockExecContext      sync.RWMutex
	lockQueryRowxContext sync.RWMutex
	lockQueryxContext    sync.RWMutex
}

// BeginTx calls BeginTxFunc.
func (mock *BeginnerMock) BeginTx(ctx context.Context, opts *sql.TxOptions) (*sql.Tx, error) {
	if mock.BeginTxFunc == nil {
		panic("BeginnerMock.BeginTxFunc: method is nil but Beginner.BeginTx was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Opts *sql.TxOptions
	}{
		Ctx:  ctx,
		Opts: opts,
	}
	mock.lockBeginTx.Lock()
	mock.calls.BeginTx = append(mock.calls.BeginTx, callInfo)
	mock.lockBeginTx.Unlock()
	return mock.BeginTxFunc(ctx, opts)
}

// BeginTxCalls gets all the calls that were made to BeginTx.
// Check the length with:
//
//	len(mockedBeginner.BeginTxCalls())
func (mock *BeginnerMock) BeginTxCalls() []struct {
	Ctx  context.Context
	Opts *sql.TxOptions
} {
	var calls []struct {
		Ctx  context.Context
		Opts *sql.TxOptions
	}
	mock.lockBeginTx.RLock()
	calls = mock.calls.BeginTx
	mock.lockBeginTx.RUnlock()
	return calls
}

// ExecContext calls ExecContextFunc.
func (mock *BeginnerMock) ExecContext(ctx context.Context, query string, args ...any) (sql.Result, error) {
	if mock.ExecContextFunc == nil {
		panic("BeginnerMock.ExecContextFunc: method is nil but Beginner.ExecContext was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Query string
		Args  []any
	}{
		Ctx:   ctx,
		Query: query,
		Args:  args,
	}
	mock.lockExecContext.Lock()
	mock.calls.ExecContext = append(mock.calls.ExecContext, callInfo)
	mock.lockExecContext.Unlock()
	return mock.ExecContextFunc(ctx, query, args...)
}

// ExecContextCalls gets all the calls that were made to ExecContext.
// Check the length with:
//
//	len(mockedBeginner.ExecContextCalls())
func (mock *BeginnerMock) ExecContextCalls() []struct {
	Ctx   context.Context
	Query string
	Args  []any
} {
	var calls []struct {
		Ctx   context.Context
		Query string
		Args  []any
	}
	mock.lockExecContext.RLock()
	calls = mock.calls.ExecContext
	mock.lockExecContext.RUnlock()
	return calls
}

// QueryRowxContext calls QueryRowxContextFunc.
func (mock *BeginnerMock) QueryRowxContext(ctx context.Context, query string, args ...any) *sqlx.Row {
	if mock.QueryRowxContextFunc == nil {
		panic("BeginnerMock.QueryRowxContextFunc: method is nil but Beginner.QueryRowxContext was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Query string
		Args  []any
	}{
		Ctx:   ctx,
		Query: query,
		Args:  args,
	}
	mock.lockQueryRowxContext.Lock()
	mock.calls.QueryRowxContext = append(mock.calls.QueryRowxContext, callInfo)
	mock.lockQueryRowxContext.Unlock()
	return mock.QueryRowxContextFunc(ctx, query, args...)
}

// QueryRowxContextCalls gets all the calls that were made to QueryRowxContext.
// Check the length with:
//
//	len(mockedBeginner.QueryRowxContextCalls())
func (mock *BeginnerMock) QueryRowxContextCalls() []struct {
	Ctx   context.Context
	Query string
	Args  []any
} {
	var calls []struct {
		Ctx   context.Context
		Query string
		Args  []any
	}
	mock.lockQueryRowxContext.RLock()
	calls = mock.calls.QueryRowxContext
	mock.lockQueryRowxContext.RUnlock()
	return calls
}

// QueryxContext calls QueryxContextFunc.
func (mock *BeginnerMock) QueryxContext(ctx context.Context, query string, args ...any) (*sqlx.Rows, error) {
	if mock.QueryxContextFunc == nil {
		panic("BeginnerMock.QueryxContextFunc: method is nil but Beginner.QueryxContext was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Query string
		Args  []any
	}{
		Ctx:   ctx,
		Query: query,
		Args:  args,
	}
	mock.lockQueryxContext.Lock()
	mock.calls.QueryxContext = append(mock.calls.QueryxContext, callInfo)
	mock.lockQueryxContext.Unlock()
	return mock.QueryxContextFunc(ctx, query, args...)
}

// QueryxContextCalls gets all the calls that were made to QueryxContext.
// Check the length with:
//
//	len(mockedBeginner.QueryxContextCalls())
func (mock *BeginnerMock) QueryxContextCalls() []struct {
	Ctx   context.Context
	Query string
	Args  []any
} {
	var calls []struct {
		Ctx   context.Context
		Query string
		Args  []any
	}
	mock.lockQueryxContext.RLock()
	calls = mock.calls.QueryxContext
	mock.lockQueryxContext.RUnlock()
	return calls
}

// Ensure, that ExecerMock does implement Execer.
// If this is not the case, regenerate this file with moq.
var _ Execer = &ExecerMock{}

// ExecerMock is a mock implementation of Execer.
//
//	func TestSomethingThatUsesExecer(t *testing.T) {
//
//		// make and configure a mocked Execer
//		mockedExecer := &ExecerMock{
//			ExecContextFunc: func(ctx context.Context, query string, args ...any) (sql.Result, error) {
//				panic("mock out the ExecContext method")
//			},
//		}
//
//		// use mockedExecer in code that requires Execer
//		// and then make assertions.
//
//	}
type ExecerMock struct {
	// ExecContextFunc mocks the ExecContext method.
	ExecContextFunc func(ctx context.Context, query string, args ...any) (sql.Result, error)

	// calls tracks calls to the methods.
	calls struct {
		// ExecContext holds details about calls to the ExecContext method.
		ExecContext []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Query is the query argument value.
			Query string
			// Args is the args argument value.
			Args []any
		}
	}
	lockExecContext sync.RWMutex
}

// ExecContext calls ExecContextFunc.
func (mock *ExecerMock) ExecContext(ctx context.Context, query string, args ...any) (sql.Result, error) {
	if mock.ExecContextFunc == nil {
		panic("ExecerMock.ExecContextFunc: method is nil but Execer.ExecContext was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Query string
		Args  []any
	}{
		Ctx:   ctx,
		Query: query,
		Args:  args,
	}
	mock.lockExecContext.Lock()
	mock.calls.ExecContext = append(mock.calls.ExecContext, callInfo)
	mock.lockExecContext.Unlock()
	return mock.ExecContextFunc(ctx, query, args...)
}

// ExecContextCalls gets all the calls that were made to ExecContext.
// Check the length with:
//
//	len(mockedExecer.ExecContextCalls())
func (mock *ExecerMock) ExecContextCalls() []struct {
	Ctx   context.Context
	Query string
	Args  []any
} {
	var calls []struct {
		Ctx   context.Context
		Query string
		Args  []any
	}
	mock.lockExecContext.RLock()
	calls = mock.calls.ExecContext
	mock.lockExecContext.RUnlock()
	return calls
}

// Ensure, that QueryerMock does implement Queryer.
// If this is not the case, regenerate this file with moq.
var _ Queryer = &QueryerMock{}

// QueryerMock is a mock implementation of Queryer.
//
//	func TestSomethingThatUsesQueryer(t *testing.T) {
//
//		// make and configure a mocked Queryer
//		mockedQueryer := &QueryerMock{
//			QueryRowxContextFunc: func(ctx context.Context, query string, args ...any) *sqlx.Row {
//				panic("mock out the QueryRowxContext method")
//			},
//			QueryxContextFunc: func(ctx context.Context, query string, args ...any) (*sqlx.Rows, error) {
//				panic("mock out the QueryxContext method")
//			},
//		}
//
//		// use mockedQueryer in code that requires Queryer
//		// and then make assertions.
//
//	}
type QueryerMock struct {
	// QueryRowxContextFunc mocks the QueryRowxContext method.
	QueryRowxContextFunc func(ctx context.Context, query string, args ...any) *sqlx.Row

	// QueryxContextFunc mocks the QueryxContext method.
	QueryxContextFunc func(ctx context.Context, query string, args ...any) (*sqlx.Rows, error)

	// calls tracks calls to the methods.
	calls struct {
		// QueryRowxContext holds details about calls to the QueryRowxContext method.
		QueryRowxContext []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Query is the query argument value.
			Query string
			// Args is the args argument value.
			Args []any
		}
		// QueryxContext holds details about calls to the QueryxContext method.
		QueryxContext []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Query is the query argument value.
			Query string
			// Args is the args argument value.
			Args []any
		}
	}
	lockQueryRowxContext sync.RWMutex
	lockQueryxContext    sync.RWMutex
}

// QueryRowxContext calls QueryRowxContextFunc.
func (mock *QueryerMock) QueryRowxContext(ctx context.Context, query string, args ...any) *sqlx.Row {
	if mock.QueryRowxContextFunc == nil {
		panic("QueryerMock.QueryRowxContextFunc: method is nil but Queryer.QueryRowxContext was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Query string
		Args  []any
	}{
		Ctx:   ctx,
		Query: query,
		Args:  args,
	}
	mock.lockQueryRowxContext.Lock()
	mock.calls.QueryRowxContext = append(mock.calls.QueryRowxContext, callInfo)
	mock.lockQueryRowxContext.Unlock()
	return mock.QueryRowxContextFunc(ctx, query, args...)
}

// QueryRowxContextCalls gets all the calls that were made to QueryRowxContext.
// Check the length with:
//
//	len(mockedQueryer.QueryRowxContextCalls())
func (mock *QueryerMock) QueryRowxContextCalls() []struct {
	Ctx   context.Context
	Query string
	Args  []any
} {
	var calls []struct {
		Ctx   context.Context
		Query string
		Args  []any
	}
	mock.lockQueryRowxContext.RLock()
	calls = mock.calls.QueryRowxContext
	mock.lockQueryRowxContext.RUnlock()
	return calls
}

// QueryxContext calls QueryxContextFunc.
func (mock *QueryerMock) QueryxContext(ctx context.Context, query string, args ...any) (*sqlx.Rows, error) {
	if mock.QueryxContextFunc == nil {
		panic("QueryerMock.QueryxContextFunc: method is nil but Queryer.QueryxContext was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Query string
		Args  []any
	}{
		Ctx:   ctx,
		Query: query,
		Args:  args,
	}
	mock.lockQueryxContext.Lock()
	mock.calls.QueryxContext = append(mock.calls.QueryxContext, callInfo)
	mock.lockQueryxContext.Unlock()
	return mock.QueryxContextFunc(ctx, query, args...)
}

// QueryxContextCalls gets all the calls that were made to QueryxContext.
// Check the length with:
//
//	len(mockedQueryer.QueryxContextCalls())
func (mock *QueryerMock) QueryxContextCalls() []struct {
	Ctx   context.Context
	Query string
	Args  []any
} {
	var calls []struct {
		Ctx   context.Context
		Query string
		Args  []any
	}
	mock.lockQueryxContext.RLock()
	calls = mock.calls.QueryxContext
	mock.lockQueryxContext.RUnlock()
	return calls
}
